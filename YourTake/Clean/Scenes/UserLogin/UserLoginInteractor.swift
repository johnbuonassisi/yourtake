//
//  UserLoginInteractor.swift
//  YourTake
//
//  Created by John Buonassisi on 2017-04-15.
//  Copyright (c) 2017 Enovi Inc. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol UserLoginInteractorInput
{
  func login(request: UserLogin.Login.Request)
  func enableLogin(request: UserLogin.EnableLogin.Request)
}

protocol UserLoginInteractorOutput
{
  func presentLogin(response: UserLogin.Login.Response)
  func presentVerifyPassword(response: UserLogin.EnableLogin.Response)
}

class UserLoginInteractor: UserLoginInteractorInput
{
  var output: UserLoginInteractorOutput!
  var worker = LoginWorker(loginStore: LoginBaasBoxStore())
  
  private let MINIMUM_PASSWORD_SIZE = 8
  
  // MARK: - Business logic
  
  func login(request: UserLogin.Login.Request)
  {
    // Check the password is of appropriate length
    let isUserNameEntered = request.username.characters.count > 0
    let isPasswordValid = request.password.characters.count >= MINIMUM_PASSWORD_SIZE
    if  !isUserNameEntered || !isPasswordValid {
      let response = UserLogin.Login.Response(isUserNameEntered: isUserNameEntered,
                                              isPasswordValid: isPasswordValid,
                                              isUserLoggedIn: false)
      output.presentLogin(response: response)
      return
    }
    
    // Login asynchronously
    worker.login(username: request.username,
                 password: request.password,
                 completion: { (isSuccess) -> Void in
                  if isSuccess {
                    
                    // Save username and password to the keychain
                    let passwordItem = KeychainPasswordItem(service: KeychainConfiguration.serviceName,
                                                            account: request.username,
                                                            accessGroup: KeychainConfiguration.accessGroup)
                    do {
                      try passwordItem.savePassword(request.password)
                    } catch {
                      fatalError("Error saving password - \(error)")
                    }
                    
                    let response = UserLogin.Login.Response(isUserNameEntered: true,
                                                            isPasswordValid: true,
                                                            isUserLoggedIn: true)
                    self.output.presentLogin(response: response)
                    
                  } else {
                    let response = UserLogin.Login.Response(isUserNameEntered: true,
                                                            isPasswordValid: true,
                                                            isUserLoggedIn: false)
                    self.output.presentLogin(response: response)
                    
                  }
    })
  }
  
  func enableLogin(request: UserLogin.EnableLogin.Request) {
    
    // Check the password is of appropriate length
    let response = UserLogin.EnableLogin.Response(isUsernameEntered: request.username.characters.count > 0,
                                                  isPasswordValid: request.password.characters.count >= MINIMUM_PASSWORD_SIZE)
    output.presentVerifyPassword(response: response)
  }
}
