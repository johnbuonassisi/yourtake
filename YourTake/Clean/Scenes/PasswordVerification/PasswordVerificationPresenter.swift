//
//  PasswordVerificationPresenter.swift
//  YourTake
//
//  Created by John Buonassisi on 2017-10-08.
//  Copyright (c) 2017 Enovi Inc. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol PasswordVerificationPresenterInput {
    func presentSomething(response: PasswordVerification.VerifyPassword.Response)
}

protocol PasswordVerificationPresenterOutput: class {
    func displaySomething(viewModel: PasswordVerification.VerifyPassword.ViewModel)
}

class PasswordVerificationPresenter: PasswordVerificationPresenterInput {

    weak var output: PasswordVerificationPresenterOutput!

    // MARK: - Presentation logic

    func presentSomething(response: PasswordVerification.VerifyPassword.Response) {
        // NOTE: Format the response from the Interactor and pass the result back to the View Controller
        
        var viewModel: PasswordVerification.VerifyPassword.ViewModel
        if response.isPasswordVerified {
            viewModel = PasswordVerification.VerifyPassword.ViewModel(isPasswordVerified: true,
                                                                      alertModel: nil,
                                                                      isContinueButtonEnabled: true,
                                                                      continueButtonColour: Constants.systemBlueColour)
        } else if response.error == nil { // Password verified, but no error, ie. password entered but continue was not pressed
            viewModel = PasswordVerification.VerifyPassword.ViewModel(isPasswordVerified: false,
                                                                      alertModel: nil,
                                                                      isContinueButtonEnabled: true,
                                                                      continueButtonColour: Constants.systemBlueColour)
        } else if response.error! == .invalidPasswordProvided {
            viewModel = PasswordVerification.VerifyPassword.ViewModel(isPasswordVerified: response.isPasswordVerified,
                                                                      alertModel: nil,
                                                                      isContinueButtonEnabled: false,
                                                                      continueButtonColour: Constants.systemLightGreyColour)
        } else {
            var message: String
            if response.error! == .noStoredPasswordFound || response.error! == .errorRetrievingPassword {
                message = "Sorry, we are unable to retrieve your password at this time. Try again."
            } else if response.error! == .passwordMismatch {
                message = "Sorry, that's not the right password! Try again."
            } else {
                message = "Sorry, an unexpected error occurred. Try again."
            }
            let alertModel = AlertModel(title: "Error",
                                        message: message,
                                        actionTitle: "OK")
            viewModel = PasswordVerification.VerifyPassword.ViewModel(isPasswordVerified: response.isPasswordVerified,
                                                                      alertModel: alertModel,
                                                                      isContinueButtonEnabled: true,
                                                                      continueButtonColour: Constants.systemBlueColour)
        }
        output.displaySomething(viewModel: viewModel)
    }
}
