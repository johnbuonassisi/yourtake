//
//  ListTakesViewController.swift
//  YourTake
//
//  Created by John Buonassisi on 2017-04-08.
//  Copyright (c) 2017 Enovi Inc. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ListTakesViewControllerInput {
    func displayTakes(viewModel: ListTakes.FetchTakes.ViewModel)
}

protocol ListTakesViewControllerOutput {
    func fetchTakes(request: ListTakes.FetchTakes.Request)
    func voteForTake(request: ListTakes.VoteForTake.Request)
}

class ListTakesViewController: UIViewController, ListTakesViewControllerInput {
    
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var noTakesTitle: UILabel!
    @IBOutlet weak var noTakesDescription: UILabel!
    
    var output: ListTakesViewControllerOutput!
    var router: ListTakesRouter!
    var listTakesDataSource = ListTakesCollectionViewDataSource()
    var challengeId: String!
    
    // MARK: - Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        ListTakesConfigurator.sharedInstance.configure(viewController: self)
        self.hidesBottomBarWhenPushed = true
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let layout : UICollectionViewFlowLayout = UICollectionViewFlowLayout()
        layout.scrollDirection = UICollectionViewScrollDirection.vertical
        
        self.collectionView?.delegate = self
        self.collectionView?.collectionViewLayout = layout
        self.collectionView?.dataSource = listTakesDataSource
        self.collectionView?.backgroundColor = UIColor.white
        self.collectionView?.refreshControl = UIRefreshControl()
        self.collectionView?.refreshControl?.beginRefreshing()
        self.collectionView?.refreshControl?.attributedTitle = NSAttributedString(string: "")
        self.collectionView?.refreshControl?.addTarget(self, action: #selector(refresh), for: UIControlEvents.valueChanged)
        
        let nib = UINib(nibName: "TakeCollectionViewCell", bundle: nil)
        self.collectionView?.register(nib, forCellWithReuseIdentifier: "TakeCollectionViewCell")
        
        let nib2 = UINib(nibName: "NoTakesCollectionViewCell", bundle: nil)
        self.collectionView?.register(nib2, forCellWithReuseIdentifier: "NoTakesCollectionViewCell")
        
        fetchTakesOnLoad()
    }
    
    // MARK: - Event handling
    
    func fetchTakesOnLoad() {
        // NOTE: Ask the Interactor to do some work
        let request = ListTakes.FetchTakes.Request(challengeId: challengeId)
        output.fetchTakes(request: request)
    }
    
    func refresh() {
        fetchTakesOnLoad()
    }
    
    // MARK: - Display logic
    
    func displayTakes(viewModel: ListTakes.FetchTakes.ViewModel) {
        // NOTE: Display the result from the Presenter
        listTakesDataSource.displayedTakes = viewModel.displayedTakes
        collectionView?.isHidden = viewModel.areTakesHidden
        noTakesTitle?.isHidden = viewModel.isNoTakesTitleHidden
        noTakesTitle?.text = viewModel.noTakesTitle
        noTakesDescription?.isHidden = viewModel.isNoTakesDescriptionHidden
        noTakesDescription?.text = viewModel.noTakesDescription
        
        collectionView?.reloadData()
        self.collectionView?.refreshControl?.endRefreshing()
    }
    
    func cellVoteButtonPressed(sender: UIButton!) {
        let request = ListTakes.VoteForTake.Request(takeTag: sender.tag)
        output.voteForTake(request: request)
    }
    
    func cellTakeImagePressed(sender: UIButton!) {
        let listTakeViewModel = listTakesDataSource.displayedTakes[sender.tag]
        router.navigateToDisplayTakeScene(listTakesViewModel: listTakeViewModel)
    }
    
}

// MARK: Layout Extension

extension ListTakesViewController : UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        // return the width and height of the collection view cell
        return CGSize(width: (collectionView.frame.width - 3*5) / 2,
                      height: ((collectionView.frame.width - 3*5) / 2) + 35)
        
    }
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        insetForSectionAt section: Int) -> UIEdgeInsets {
        
        // return the margins to apply to content in the specified section
        return UIEdgeInsetsMake(5, 5, 5, 5)
    }
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        
        // return the spacing between successive rows or columns of a section
        return 5.0
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        
        // return the spacing between successive items in the rows or columns of a section
        return 5.0
    }
}
