//
//  ListTakesPresenter.swift
//  YourTake
//
//  Created by John Buonassisi on 2017-04-08.
//  Copyright (c) 2017 Enovi Inc. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ListTakesPresenterInput {
    func presentFetchedTakes(response: ListTakes.FetchTakes.Response)
}

protocol ListTakesPresenterOutput: class {
    func displayTakes(viewModel: ListTakes.FetchTakes.ViewModel)
}

class ListTakesPresenter: ListTakesPresenterInput {
    weak var output: ListTakesPresenterOutput!
    
    let likedButtonImage = UIImage(named: "Checked (System Blue)", in: nil, compatibleWith: nil)!
    let notLikedButtonImage = UIImage(named: "Checked (Light Grey)", in: nil, compatibleWith: nil)!
    
    // MARK: - Presentation logic
    
    func presentFetchedTakes(response: ListTakes.FetchTakes.Response) {
        // NOTE: Format the response from the Interactor and pass the result back to the View Controller
        
        var displayedTakes: [ListTakes.FetchTakes.ViewModel.DisplayedTake] = []
        for take in response.takes {
            
            var likeButtonImage: UIImage?
            if(take.id == response.votedForTakeId) {
                likeButtonImage = likedButtonImage
            } else {
                likeButtonImage = notLikedButtonImage
            }
            
            let displayedTake = ListTakes.FetchTakes.ViewModel.DisplayedTake(author: take.author,
                numberOfVotes: "\(take.votes)",
                likeButtonImage: likeButtonImage!,
                takeImage: take.overlay,
                voters: take.voters)
            
            displayedTakes.append(displayedTake)
        }
        
        let viewModel = ListTakes.FetchTakes.ViewModel(displayedTakes: displayedTakes)
        output.displayTakes(viewModel: viewModel)
    }
    
}
