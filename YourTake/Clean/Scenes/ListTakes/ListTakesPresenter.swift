//
//  ListTakesPresenter.swift
//  YourTake
//
//  Created by John Buonassisi on 2017-04-08.
//  Copyright (c) 2017 Enovi Inc. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ListTakesPresenterInput {
    func presentFetchedTakes(response: ListTakes.FetchTakes.Response)
}

protocol ListTakesPresenterOutput: class {
    func displayTakes(viewModel: ListTakes.FetchTakes.ViewModel)
}

class ListTakesPresenter: ListTakesPresenterInput {
    weak var output: ListTakesPresenterOutput!
    
    let likedButtonImage = UIImage(named: "Checked (System Blue)", in: nil, compatibleWith: nil)!
    let notLikedButtonImage = UIImage(named: "Checked (Light Grey)", in: nil, compatibleWith: nil)!
    
    // MARK: - Presentation logic
    let noTakesTitleOptions = ["Apologies.", "Lame!", "Oops...", "Can you believe it?",
                               "Geez...", "Come on...", "Grrr!", "Awkward..."]
    let noTakesDescriptionOptions = ["No users have responded yet",
                                     "Your friends are lame and haven't responded yet",
                                     "Tell your friends to stop snaping and complete this challenge!",
                                     "Get your friends on the phone and tell them to respond to the challenge already!",
                                     "Looks like you need more reliable friends that will respond to challenges",
                                     "We've got nothing to show because no one has completed the challenge yet",
                                     "This would normally be the fun part, but no one has completed the challenge yet",
                                     "We're waiting for someone to complete the challenge"]
    
    func presentFetchedTakes(response: ListTakes.FetchTakes.Response) {
        // NOTE: Format the response from the Interactor and pass the result back to the View Controller
        
        var displayedTakes: [ListTakes.FetchTakes.ViewModel.DisplayedTake] = []
        for take in response.takes {
            
            var likeButtonImage: UIImage?
            if(take.id == response.votedForTakeId) {
                likeButtonImage = likedButtonImage
            } else {
                likeButtonImage = notLikedButtonImage
            }
            
            let displayedTake = ListTakes.FetchTakes.ViewModel.DisplayedTake(author: take.author,
                numberOfVotes: String(take.votes),
                likeButtonImage: likeButtonImage!,
                takeImage: take.overlay,
                voters: take.voters)
            
            displayedTakes.append(displayedTake)
        }
        
        // If there are no takes, indicate so to the user
        var noTakesTitle = ""
        var noTakesDescription = ""
        if displayedTakes.isEmpty {
            let randomNoTakesTitle = arc4random_uniform(UInt32(noTakesTitleOptions.count))
            noTakesTitle = noTakesTitleOptions[Int(randomNoTakesTitle)]
            let randomNoTakesDescription = arc4random_uniform(UInt32(noTakesDescriptionOptions.count))
            noTakesDescription = noTakesDescriptionOptions[Int(randomNoTakesDescription)]
        }
        
        let viewModel = ListTakes.FetchTakes.ViewModel(displayedTakes: displayedTakes,
                                                       areTakesHidden: displayedTakes.isEmpty,
                                                       isNoTakesTitleHidden: !displayedTakes.isEmpty,
                                                       isNoTakesDescriptionHidden: !displayedTakes.isEmpty,
                                                       noTakesTitle: noTakesTitle,
                                                       noTakesDescription: noTakesDescription)
        output.displayTakes(viewModel: viewModel)
    }
    
}
