//
//  SignupUserInteractor.swift
//  YourTake
//
//  Created by John Buonassisi on 2017-04-15.
//  Copyright (c) 2017 Enovi Inc. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol SignupUserInteractorInput
{
  func signup(request: SignupUser.Signup.Request, completion: ((Bool) -> Void)?)
}

protocol SignupUserInteractorOutput
{
  func presentSignup(response: SignupUser.Signup.Response)
}

class SignupUserInteractor: SignupUserInteractorInput
{
  var output: SignupUserInteractorOutput!
  var worker = SignupWorker(signupStore: SignupBaasBoxStore())
  
  private var isValidEmailAddress = false
  private var isValidUsername = false
  private var isValidPassword = false
  
  // MARK: - Business logic
  
  func signup(request: SignupUser.Signup.Request, completion: ((Bool) -> Void)?)
  {

    switch request.requestType {
    case .signupRequest:
      worker.signup(emailAddress: request.emailAddress,
                   username: request.username,
                   password: request.password,
                   completion: { (isSignupSuccess) -> Void in
                    if(isSignupSuccess) {
                      
                      // Save the username and password to the keychain
                      let passwordItem = KeychainPasswordItem(service: KeychainConfiguration.serviceName,
                                                              account: request.username,
                                                              accessGroup: KeychainConfiguration.accessGroup)
                      do {
                        try passwordItem.savePassword(request.password)
                      } catch {
                        fatalError("Error updating keychain - \(error)")
                      }
                      completion!(true)
                    } else {
                      completion!(false)
                    }
      })
      return
    case .emailAddressVerification:
      isValidEmailAddress = isValidEmailAddress(request.emailAddress)
    case .userNameVerification:
      isValidUsername = isValidUserName(request.username)
    case .passwordVerification:
      isValidPassword = isValidPassword(request.password)
    }
    
    let response = SignupUser.Signup.Response(isEmailValid: isValidEmailAddress,
                                              isUserNameValid: isValidUsername,
                                              isPasswordValid: isValidPassword)
    output.presentSignup(response: response)
  }
  
  private func isValidEmailAddress(_ emailAddress: String) -> Bool {
    let emailRegEx = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}"
    let emailTest = NSPredicate(format: "SELF MATCHES %@", emailRegEx)
    return emailTest.evaluate(with: emailAddress)
  }
  
  private func isValidUserName(_ username: String) -> Bool {
    return username.characters.count >= 5
  }
  
  private func isValidPassword(_ password: String) -> Bool {
    return password.characters.count >= 7
  }
  
}
