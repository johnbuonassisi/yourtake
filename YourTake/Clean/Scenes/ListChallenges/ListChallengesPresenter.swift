//
//  ListChallengesPresenter.swift
//  YourTakeClean
//
//  Created by John Buonassisi on 2017-03-28.
//  Copyright (c) 2017 JAB. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ListChallengesPresenterInput
{
  func presentFetchedChallenges(response: ListChallenges.FetchChallenges.Response)
}

protocol ListChallengesPresenterOutput: class
{
  func displayFetchedChallenges(viewModel: ListChallenges.FetchChallenges.ViewModel)
}

class ListChallengesPresenter: ListChallengesPresenterInput
{
  weak var output: ListChallengesPresenterOutput!
  
  // MARK: - Presentation logic
  
  func presentFetchedChallenges(response: ListChallenges.FetchChallenges.Response)
  {
    var displayedChallenges: [ListChallenges.FetchChallenges.ViewModel.DisplayedChallenge] = []
    for challenge in response.challenges
    {
      let displayedChallenge =
        ListChallenges.FetchChallenges.ViewModel.DisplayedChallenge(id: challenge.id,
                                                                    name: challenge.author,
                                                                    imageId: challenge.imageId,
                                                                    challengeImage: challenge.image,
                                                                    expiryLabel: challenge.getTimeRemaining().description,
                                                                    totalVotesLabel: "10",
                                                                    isDrawButtonEnabled: true,
                                                                    isVoteButton: true)
      displayedChallenges.append(displayedChallenge)
    }
    
    var challengeType =
      ListChallenges.FetchChallenges.ViewModel.ChallengeViewType(rawValue: response.challengeType.rawValue)
    if(displayedChallenges.count == 0)
    {
      challengeType = .noChallenges
    }
    
    let viewModel = ListChallenges.FetchChallenges.ViewModel(challengeType: challengeType!,
                                                             displayedChallenges: displayedChallenges)
    output.displayFetchedChallenges(viewModel: viewModel)
  }
}
