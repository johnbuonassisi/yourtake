//
//  ListChallengesViewController.swift
//  YourTakeClean
//
//  Created by John Buonassisi on 2017-03-28.
//  Copyright (c) 2017 JAB. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ListChallengesViewControllerInput
{
  func displayFetchedChallenges(viewModel: ListChallenges.FetchChallenges.ViewModel)
}

protocol ListChallengesViewControllerOutput
{
  func fetchChallenges(request: ListChallenges.FetchChallenges.Request)
}

class ListChallengesViewController: UIViewController,
                                    UITableViewDelegate,
                                    UITabBarDelegate,
                                    ListChallengesViewControllerInput
{
  // MARK: - Object lifecycle
  
  var output: ListChallengesViewControllerOutput!
  var router: ListChallengesRouter!
  
  var userChallengesDataSource = ListChallengesForUserTableViewDataSource()
  var friendChallengesDataSource = ListChallengesForFriendsTableViewDataSource()
  var noChallengesDataSource = ListChallengesNoChallengesTableViewDataSource()
  
  @IBOutlet weak var tableView: UITableView!
  @IBOutlet weak var tabBar: UITabBar!
  @IBOutlet weak var userTab: UITabBarItem!
  @IBOutlet weak var friendsTab: UITabBarItem!
  

  override func awakeFromNib()
  {
    super.awakeFromNib()
    ListChallengesConfigurator.sharedInstance.configure(viewController: self)
  }
  
  // MARK: - View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    tableView.dataSource = userChallengesDataSource
    tableView.delegate = self
    tableView.rowHeight = ChallengeTableViewCell.CellRowHeight()
    
    let ctNib = UINib(nibName: "ChallengeTableViewCell", bundle: nil)
    tableView.register(ctNib, forCellReuseIdentifier: "ChallengeTableViewCell")
    
    let ectNib = UINib(nibName: "EmptyChallengeTableViewCell", bundle: nil)
    tableView.register(ectNib, forCellReuseIdentifier: "EmptyChallengeTableViewCell")
    
    tabBar.delegate = self
    tabBar.selectedItem = tabBar.items?[0]
    
    fetchChallengesOnLoad()
  }
  
  // MARK: - Event handling
  
  func fetchChallengesOnLoad()
  {
    // NOTE: Ask the Interactor to do some work
    let tag = tabBar.selectedItem!.tag
    let challengeType = ListChallenges.FetchChallenges.Request.ChallengeRequestType(rawValue: tag)
    let request = ListChallenges.FetchChallenges.Request(challengeType: challengeType!)
    output.fetchChallenges(request: request)
  }
  
  // MARK: - Display logic
  
  func displayFetchedChallenges(viewModel: ListChallenges.FetchChallenges.ViewModel)
  {
    // NOTE: Display the result from the Presenter
    switch(viewModel.challengeType) {
    case .userChallenges:
      userChallengesDataSource.displayedChallenges = viewModel.displayedChallenges
      tableView.dataSource = userChallengesDataSource
    case .friendChallenges:
      friendChallengesDataSource.displayedChallenges = viewModel.displayedChallenges
      tableView.dataSource = friendChallengesDataSource
    case .noChallenges:
      tableView.dataSource = noChallengesDataSource
    }
    
    tableView.reloadData()
  }
  
  // MARK - Tab Bar Control delegate methods
  
  func tabBar(_ tabBar: UITabBar, didSelect item: UITabBarItem) {
    fetchChallengesOnLoad()
  }
  
}
